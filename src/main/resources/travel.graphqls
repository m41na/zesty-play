type Query {
	airplanes: [Airplane]
	airports: [Airport]
	airline: [Airline]
	flights: [Flight]
	countries: [Country]
}

type Mutation {
	airplane(name: String, priCode: String,	secCode: String, dst: String): Airplane!
}

type Country {
	name: String
	priCode: String
	secCode String
	dst: String
}

type Route {
	origin: String!
	originCode: String
	originAirport: String
	destCode: String
	destAirport: String
	flightCode: String
	flightFlag: String
	connect: String
	coordinates: String
}

type Airport {
	id: Long
	name: String
	city: String
	country: String
	iata: String
	icao: String
	latitude: Float
	longitude: Float
	altitude: Float
	timezone: String
	dst: String
	dbtz: String
	type: String
	source: String
}

type Airplane{
	name: String
	priCode: String
	secCode: String
	dst: String
}

type Airline {
	id: Long
	airline: String
	alias: String
	iata: String
	icao: String
	service: String
	country: String
	active: String
}

type Subscription {
	newAirplane: Airplane!
}